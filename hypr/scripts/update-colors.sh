#!/usr/bin/env bash
# update-colors.sh — generate colour palettes from the current wallpaper using
# matugen or pywal.  Colours are written to Hyprland, Eww, Wofi and Kitty
# configuration files.  This script is invoked automatically by Waypaper via the
# post_command option and can also be run manually.
set -euo pipefail

wallpaper="${1:-}"

# Determine the wallpaper if none is passed; fall back to the last cached value
if [ -z "$wallpaper" ]; then
  if [ -f "$HOME/.cache/current_wallpaper" ]; then
    wallpaper=$(<"$HOME/.cache/current_wallpaper")
  else
    echo "No wallpaper specified and no cached wallpaper found." >&2
    exit 1
  fi
fi

# Ensure the output directories exist
mkdir -p "$HOME/.config/hypr" "$HOME/.config/wofi" "$HOME/.config/kitty" "$HOME/.config/waybar"

# Helper: lighten a hex colour.  Takes a colour like #123456 and produces a
# lightened version by increasing each component.  We use a 50 % factor by
# default so that the "bright" palette differs visibly from the base colours.
lighten() {
  python3 - "$1" <<'PY'
import sys
c = sys.argv[1].lstrip('#')
factor = 0.50  # 50 % brighter
r = int(c[0:2], 16)
g = int(c[2:4], 16)
b = int(c[4:6], 16)

def brighten(x, f):
    return min(int(x * (1 + f)), 255)

br = brighten(r, factor)
bg = brighten(g, factor)
bb = brighten(b, factor)
print(f"#{br:02x}{bg:02x}{bb:02x}")
PY
}

# Generate colours using matugen if available; fall back to pywal
if command -v matugen >/dev/null 2>&1; then
  # matugen returns a JSON object; we extract the dark palette using jq
  json=$(matugen --json hex image "$wallpaper")
  bg=$(jq -r '.colors.dark.background' <<< "$json")
  fg=$(jq -r '.colors.dark.on_background' <<< "$json")
  accent=$(jq -r '.colors.dark.primary' <<< "$json")
  err=$(jq -r '.colors.dark.error' <<< "$json")
  secondary=$(jq -r '.colors.dark.secondary' <<< "$json")
  tertiary=$(jq -r '.colors.dark.tertiary' <<< "$json")
  surface=$(jq -r '.colors.dark.surface' <<< "$json")
  surface_var=$(jq -r '.colors.dark.surface_variant' <<< "$json")

  # Define the eight base colours; these will make up indices 0–7
  base=("$bg" "$err" "$accent" "$secondary" "$tertiary" "$surface_var" "$surface" "$fg")
  # Build the bright variants (8–15) by lightening each base colour
  bright=()
  for c in "${base[@]}"; do
    bright+=("$(lighten "$c")")
  done

  # Write Hyprland colour definitions (0–15 plus background/foreground/accent)
  {
    echo "# Generated by update-colors.sh from $wallpaper"
    for i in {0..7}; do
      echo "\$color$i = rgb(${base[$i]#\#})"
    done
    for i in {8..15}; do
      idx=$((i-8))
      echo "\$color$i = rgb(${bright[$idx]#\#})"
    done
    echo "\$background = rgb(${bg#\#})"
    echo "\$foreground = rgb(${fg#\#})"
    echo "\$accent = rgb(${accent#\#})"
    echo "\$primary = rgb(${accent#\#})"
    echo "\$secondary = rgb(${secondary#\#})"
  } > "$HOME/.config/hypr/colors.conf"

  # Write Waybar CSS variables.  Waybar will import this file from its
  # main stylesheet.  CSS custom properties are defined on :root so they can be
  # referenced as var(--color0), var(--background), etc.
  {
    echo "/* Generated by update-colors.sh */"
    echo ""
    echo ":root {"
    for i in {0..7}; do
      echo "  --color$i: ${base[$i]};"
    done
    for i in {8..15}; do
      idx=$((i-8))
      echo "  --color$i: ${bright[$idx]};"
    done
    echo "  --background: $bg;"
    echo "  --foreground: $fg;"
    echo "  --accent: $accent;"
    echo "}"
  } > "$HOME/.config/waybar/colors.css"

  # Write Waybar colors using @define-color syntax for compatibility with existing styles
  {
    echo "/* Waybar colors generated by update-colors.sh */"
    for i in {0..7}; do
      echo "@define-color color$i ${base[$i]};"
    done
    for i in {8..15}; do
      idx=$((i-8))
      echo "@define-color color$i ${bright[$idx]};"
    done
    echo "@define-color background $bg;"
    echo "@define-color foreground $fg;"
    echo "@define-color accent $accent;"
  } > "$HOME/.cache/wal/colors-waybar.css"

  # Write Wofi colours as key=value pairs【223916034315546†L132-L144】
  {
    echo "window=$surface"
    echo "border=$surface_var"
    echo "text=$fg"
    echo "prompt=$accent"
    echo "prompt_text=$fg"
    echo "entry=$surface_var"
    echo "entry_text=$fg"
    echo "selected=$accent"
    echo "selected_text=$fg"
  } > "$HOME/.config/wofi/colors"

  # Write Kitty colour overrides with a full 16‑colour palette
  {
    echo "background $bg"
    echo "foreground $fg"
    echo "selection_background $accent"
    echo "selection_foreground $fg"
    echo "cursor $fg"
    echo "cursor_text_color $bg"
    for i in {0..7}; do
      echo "color$i ${base[$i]}"
    done
    for i in {8..15}; do
      idx=$((i-8))
      echo "color$i ${bright[$idx]}"
    done
  } > "$HOME/.config/kitty/pywal.conf"

else
  # Fall back to pywal if matugen is unavailable
  if command -v wal >/dev/null 2>&1; then
    wal -i "$wallpaper" -n
    # Copy generated files to our config paths
    [ -f "$HOME/.cache/wal/colors-hyprland.conf" ] && cp "$HOME/.cache/wal/colors-hyprland.conf" "$HOME/.config/hypr/colors.conf"
    [ -f "$HOME/.cache/wal/colors" ] && cp "$HOME/.cache/wal/colors" "$HOME/.config/wofi/colors"
    [ -f "$HOME/.cache/wal/colors-kitty.conf" ] && cp "$HOME/.cache/wal/colors-kitty.conf" "$HOME/.config/kitty/pywal.conf"
    # Generate Waybar colours from Pywal's colours
    if [ -f "$HOME/.cache/wal/colors" ]; then
      mapfile -t cols < "$HOME/.cache/wal/colors"
      {
        echo "/* Generated by update-colors.sh (pywal fallback) */"
        echo ":root {"
        for i in {0..15}; do
          echo "  --color$i: ${cols[$i]};"
        done
        echo "  --background: ${cols[0]};"
        echo "  --foreground: ${cols[15]};"
        echo "  --accent: ${cols[8]};"
        echo "  --primary: ${cols[8]};"
        echo "  --secondary: ${cols[9]};"
        echo "}"
      } > "$HOME/.config/waybar/colors.css"
    fi
  else
    echo "Neither matugen nor pywal is installed. Cannot generate colours." >&2
    exit 1
  fi
fi

# Cache the wallpaper path
mkdir -p "$HOME/.cache"
echo "$wallpaper" > "$HOME/.cache/current_wallpaper"

# Reload Hyprland and reconfigure apps
if command -v hyprctl >/dev/null 2>&1; then
  hyprctl reload || true
fi
# Reload Dunst to pick up new colours【519288873621390†L56-L81】
if command -v dunst >/dev/null 2>&1; then
  pkill -SIGUSR1 dunst || true
fi
# Reload Kitty colours
if command -v kitty >/dev/null 2>&1; then
  kitty @ set-colors --all "$HOME/.config/kitty/pywal.conf" || true
fi

# Request Waybar to reload its style.  Waybar listens for SIGUSR2
# to reload configuration and CSS.  This ensures the new colours are applied.
if command -v waybar >/dev/null 2>&1; then
  pkill -SIGUSR2 waybar || true
fi
