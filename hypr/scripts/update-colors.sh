#!/usr/bin/env bash

# Lightweight colour update script for Hyprland, Waybar, Wofi and Kitty.
#
# This script is inspired by the upstream `update-colors.sh` from the
# user's repository.  It uses `matugen` if installed to generate a
# dark colour palette from the current wallpaper and falls back to
# `pywal` if `matugen` is unavailable.  After generating a palette,
# it writes colour files for Hyprland (`colors.conf`), Waybar
# (`colors.css`), Wofi (`colors`), and Kitty (`pywal.conf`) and sends
# reload signals to Waybar and Dunst.  It also ensures the current
# wallpaper path is cached in `~/.cache/current_wallpaper`.

set -euo pipefail

WALLPAPER="${1:-}"

# Determine the wallpaper if none supplied
if [ -z "$WALLPAPER" ]; then
    if [ -f "$HOME/.cache/current_wallpaper" ]; then
        WALLPAPER=$(<"$HOME/.cache/current_wallpaper")
    elif [ -f "$HOME/.config/hypr/hyprpaper.conf" ]; then
        WALLPAPER=$(grep -E '^wallpaper\s*=' "$HOME/.config/hypr/hyprpaper.conf" | head -1 | sed 's/^wallpaper\s*=\s*[^,]*,\s*//' | sed "s|\$HOME|$HOME|g" | xargs)
    fi
fi

if [ -z "$WALLPAPER" ]; then
    echo "Error: no wallpaper specified and none cached." >&2
    exit 1
fi

mkdir -p "$HOME/.cache/wal"

if command -v matugen >/dev/null 2>&1; then
    # Generate JSON from wallpaper using matugen
    COLORS_JSON=$(matugen --json hex image "$WALLPAPER")
    # Extract some colours
    BG=$(jq -r '.colors.dark.background' <<< "$COLORS_JSON")
    FG=$(jq -r '.colors.dark.on_background' <<< "$COLORS_JSON")
    PRIM=$(jq -r '.colors.dark.primary' <<< "$COLORS_JSON")
    SEC=$(jq -r '.colors.dark.secondary' <<< "$COLORS_JSON")
    TER=$(jq -r '.colors.dark.tertiary' <<< "$COLORS_JSON")
    SURF=$(jq -r '.colors.dark.surface' <<< "$COLORS_JSON")
    SURF_VAR=$(jq -r '.colors.dark.surface_variant' <<< "$COLORS_JSON")
    OUTL=$(jq -r '.colors.dark.outline' <<< "$COLORS_JSON")
    ERR=$(jq -r '.colors.dark.error' <<< "$COLORS_JSON")

    # Write Hyprland colours
    cat > "$HOME/.cache/wal/colors-hyprland.conf" << EOF
# Generated by update-colors.sh
\$background = rgb(${BG#\#})
\$foreground = rgb(${FG#\#})
\$primary    = rgb(${PRIM#\#})
\$secondary  = rgb(${SEC#\#})
\$tertiary   = rgb(${TER#\#})
\$surface    = rgb(${SURF#\#})
\$surface_variant = rgb(${SURF_VAR#\#})
\$outline    = rgb(${OUTL#\#})
\$accent     = \$primary
\$color0 = \$background
\$color1 = rgb(${ERR#\#})
\$color2 = \$tertiary
\$color3 = \$surface_variant
\$color4 = \$primary
\$color5 = \$secondary
\$color6 = \$surface
\$color7 = \$foreground
EOF

    # Write Waybar CSS colours
    cat > "$HOME/.cache/wal/colors.css" << EOF
@define-color background ${BG};
@define-color foreground ${FG};
@define-color primary ${PRIM};
@define-color secondary ${SEC};
@define-color tertiary ${TER};
@define-color surface ${SURF};
@define-color surface_variant ${SURF_VAR};
@define-color outline ${OUTL};
@define-color accent @primary;
@define-color color0 @background;
@define-color color1 ${ERR};
@define-color color2 @tertiary;
@define-color color3 ${SURF_VAR};
@define-color color4 @primary;
@define-color color5 @secondary;
@define-color color6 ${SURF};
@define-color color7 @foreground;
EOF

    # Write Wofi colours (simple list of key=value pairs)
    cat > "$HOME/.cache/wal/colors-wofi" << EOF
window=${SURF}
border=${OUTL}
text=${FG}
prompt=${PRIM}
prompt_text=${FG}
entry=${SURF_VAR}
entry_text=${FG}
selected=${PRIM}
selected_text=${FG}
EOF

    # Write Kitty colour overrides
    cat > "$HOME/.cache/wal/colors-kitty.conf" << EOF
background ${BG}
foreground ${FG}
selection_background ${PRIM}
selection_foreground ${FG}
cursor ${FG}
cursor_text_color ${BG}
# simple palette
color0 ${BG}
color1 ${ERR}
color2 ${TER}
color3 ${SURF_VAR}
color4 ${PRIM}
color5 ${SEC}
color6 ${SURF}
color7 ${FG}
color8 ${BG}
color9 ${ERR}
color10 ${TER}
color11 ${SURF_VAR}
color12 ${PRIM}
color13 ${SEC}
color14 ${SURF}
color15 ${FG}
EOF

elif command -v wal >/dev/null 2>&1; then
    # Use pywal to generate files (Kitty and Xresources). `-n` avoids applying colours immediately.
    wal -i "$WALLPAPER" -n
else
    echo "Error: neither matugen nor pywal is installed." >&2
    exit 1
fi

# Cache the wallpaper path
echo "$WALLPAPER" > "$HOME/.cache/current_wallpaper"

# Ensure config directories exist
mkdir -p "$HOME/.config/hypr" "$HOME/.config/waybar" "$HOME/.config/wofi" "$HOME/.config/kitty"

# Copy generated colour files into place
if [ -f "$HOME/.cache/wal/colors-hyprland.conf" ]; then
    cp "$HOME/.cache/wal/colors-hyprland.conf" "$HOME/.config/hypr/colors.conf"
fi
if [ -f "$HOME/.cache/wal/colors.css" ]; then
    cp "$HOME/.cache/wal/colors.css" "$HOME/.config/waybar/colors.css"
fi
if [ -f "$HOME/.cache/wal/colors-wofi" ]; then
    cp "$HOME/.cache/wal/colors-wofi" "$HOME/.config/wofi/colors"
fi
if [ -f "$HOME/.cache/wal/colors-kitty.conf" ]; then
    cp "$HOME/.cache/wal/colors-kitty.conf" "$HOME/.config/kitty/pywal.conf"
fi

# Send reload signals
if command -v dunst >/dev/null 2>&1; then
    # USR1 tells dunst to reload its configuration
    pkill -SIGUSR1 dunst || true
fi
hyprctl reload || true
pkill -SIGUSR2 waybar || true

echo "Colour scheme updated based on $WALLPAPER"