#!/usr/bin/env bash

# Update the colour scheme across the desktop using Pywal or Matugen.
#
# Usage: update-colors.sh [wallpaper]
# If a wallpaper path is provided, that image will be used to generate
# colours.  Otherwise, the script will read the last wallpaper from
# ~/.cache/current_wallpaper or use the image configured in
# hyprpaper.conf.  The script then copies the generated colour files
# into the appropriate config directories and signals applications to
# reload their themes.

set -e

WALLPAPER="$1"

# Determine wallpaper
if [ -z "$WALLPAPER" ]; then
    if [ -f ~/.cache/current_wallpaper ]; then
        WALLPAPER=$(<~/.cache/current_wallpaper)
    elif [ -f ~/.config/hypr/hyprpaper.conf ]; then
        # Extract wallpaper path from hyprpaper.conf
        WALLPAPER=$(grep -E '^wallpaper\s*=' ~/.config/hypr/hyprpaper.conf | head -1 | sed 's/^wallpaper\s*=\s*[^,]*,\s*//' | sed 's|\$HOME|'"$HOME"'|g' | xargs)
    elif [ -f ~/Pictures/wallpapers/desert.jpg ]; then
        WALLPAPER=~/Pictures/wallpapers/desert.jpg
    fi
fi

if [ -z "$WALLPAPER" ]; then
    echo "No wallpaper specified and no cached wallpaper found." >&2
    exit 1
fi

# Generate colours using matugen or wal
if command -v matugen >/dev/null 2>&1; then
    # Create cache directory
    mkdir -p ~/.cache/wal
    
    # Generate colors with matugen and extract dark theme colors
    COLORS_JSON=$(matugen --json hex image "$WALLPAPER")
    
    # Create Hyprland colors file
    cat > ~/.cache/wal/colors-hyprland.conf << EOF
# Hyprland colors generated by matugen
\$background = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.background' | sed 's/#//'))
\$foreground = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.on_background' | sed 's/#//'))
\$primary = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.primary' | sed 's/#//'))
\$secondary = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary' | sed 's/#//'))
\$tertiary = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary' | sed 's/#//'))
\$surface = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.surface' | sed 's/#//'))
\$surface_variant = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_variant' | sed 's/#//'))
\$outline = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.outline' | sed 's/#//'))
\$accent = \$primary

# Legacy color variables for compatibility
\$color0 = \$background
\$color1 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.error' | sed 's/#//'))
\$color2 = \$tertiary
\$color3 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary_container' | sed 's/#//'))
\$color4 = \$primary
\$color5 = \$secondary
\$color6 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.primary_container' | sed 's/#//'))
\$color7 = \$foreground
\$color8 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_dim' | sed 's/#//'))
\$color9 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.error_container' | sed 's/#//'))
\$color10 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary_fixed' | sed 's/#//'))
\$color11 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary_fixed' | sed 's/#//'))
\$color12 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.primary_fixed' | sed 's/#//'))
\$color13 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary_container' | sed 's/#//'))
\$color14 = rgb($(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_bright' | sed 's/#//'))
\$color15 = \$foreground
EOF

    # Create Waybar CSS colors file
    cat > ~/.cache/wal/colors.css << EOF
/* CSS colors generated by matugen */
@define-color background $(echo "$COLORS_JSON" | jq -r '.colors.dark.background');
@define-color foreground $(echo "$COLORS_JSON" | jq -r '.colors.dark.on_background');
@define-color primary $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary');
@define-color secondary $(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary');
@define-color tertiary $(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary');
@define-color surface $(echo "$COLORS_JSON" | jq -r '.colors.dark.surface');
@define-color surface_variant $(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_variant');
@define-color outline $(echo "$COLORS_JSON" | jq -r '.colors.dark.outline');
@define-color accent @primary;

/* Legacy color variables for compatibility */
@define-color color0 @background;
@define-color color1 $(echo "$COLORS_JSON" | jq -r '.colors.dark.error');
@define-color color2 @tertiary;
@define-color color3 $(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary_container');
@define-color color4 @primary;
@define-color color5 @secondary;
@define-color color6 $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary_container');
@define-color color7 @foreground;
@define-color color8 $(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_dim');
@define-color color9 $(echo "$COLORS_JSON" | jq -r '.colors.dark.error_container');
@define-color color10 $(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary_fixed');
@define-color color11 $(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary_fixed');
@define-color color12 $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary_fixed');
@define-color color13 $(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary_container');
@define-color color14 $(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_bright');
@define-color color15 @foreground;
EOF

    # Create Kitty colors file
    cat > ~/.cache/wal/colors-kitty.conf << EOF
# Kitty colors generated by matugen
background $(echo "$COLORS_JSON" | jq -r '.colors.dark.background')
foreground $(echo "$COLORS_JSON" | jq -r '.colors.dark.on_background')
selection_background $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary')
selection_foreground $(echo "$COLORS_JSON" | jq -r '.colors.dark.on_primary')
cursor $(echo "$COLORS_JSON" | jq -r '.colors.dark.on_background')
cursor_text_color $(echo "$COLORS_JSON" | jq -r '.colors.dark.background')

# Black
color0 $(echo "$COLORS_JSON" | jq -r '.colors.dark.background')
color8 $(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_dim')

# Red
color1 $(echo "$COLORS_JSON" | jq -r '.colors.dark.error')
color9 $(echo "$COLORS_JSON" | jq -r '.colors.dark.error_container')

# Green
color2 $(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary')
color10 $(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary_fixed')

# Yellow
color3 $(echo "$COLORS_JSON" | jq -r '.colors.dark.tertiary_container')
color11 $(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary_fixed')

# Blue
color4 $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary')
color12 $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary_fixed')

# Magenta
color5 $(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary')
color13 $(echo "$COLORS_JSON" | jq -r '.colors.dark.secondary_container')

# Cyan
color6 $(echo "$COLORS_JSON" | jq -r '.colors.dark.primary_container')
color14 $(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_bright')

# White
color7 $(echo "$COLORS_JSON" | jq -r '.colors.dark.on_background')
color15 $(echo "$COLORS_JSON" | jq -r '.colors.dark.on_background')
EOF

    # Create Wofi colors file
    cat > ~/.cache/wal/colors-wofi << EOF
window=$(echo "$COLORS_JSON" | jq -r '.colors.dark.surface')
border=$(echo "$COLORS_JSON" | jq -r '.colors.dark.outline')
text=$(echo "$COLORS_JSON" | jq -r '.colors.dark.on_surface')
prompt=$(echo "$COLORS_JSON" | jq -r '.colors.dark.primary')
prompt_text=$(echo "$COLORS_JSON" | jq -r '.colors.dark.on_primary')
entry=$(echo "$COLORS_JSON" | jq -r '.colors.dark.surface_variant')
entry_text=$(echo "$COLORS_JSON" | jq -r '.colors.dark.on_surface')
selected=$(echo "$COLORS_JSON" | jq -r '.colors.dark.primary')
selected_text=$(echo "$COLORS_JSON" | jq -r '.colors.dark.on_primary')
EOF
elif command -v wal >/dev/null 2>&1; then
    wal -i "$WALLPAPER" -n
else
    echo "Error: neither matugen nor pywal is installed." >&2
    exit 1
fi

# Save the current wallpaper path for future runs
echo "$WALLPAPER" > ~/.cache/current_wallpaper

# Copy generated colour files where applications expect them
mkdir -p ~/.config/hypr ~/.config/waybar ~/.config/wofi ~/.config/kitty

# Hyprland colours
if [ -f ~/.cache/wal/colors-hyprland.conf ]; then
    cp ~/.cache/wal/colors-hyprland.conf ~/.config/hypr/colors.conf
fi

# Waybar colours (CSS variables).  Wal names this file `colors.css`
if [ -f ~/.cache/wal/colors.css ]; then
    cp ~/.cache/wal/colors.css ~/.config/waybar/colors.css
fi

# Wofi colours (simple list)
if [ -f ~/.cache/wal/colors-wofi ]; then
    cp ~/.cache/wal/colors-wofi ~/.config/wofi/colors
fi

# Kitty colours
if [ -f ~/.cache/wal/colors-kitty.conf ]; then
    cp ~/.cache/wal/colors-kitty.conf ~/.config/kitty/pywal.conf
fi

# Set GTK theme and icon theme based on colors
# Determine if we should use dark or light theme based on background brightness
BACKGROUND_HEX=$(echo "$COLORS_JSON" | jq -r '.colors.dark.background' | sed 's/#//')
# Convert hex to RGB and calculate luminance
R=$((0x${BACKGROUND_HEX:0:2}))
G=$((0x${BACKGROUND_HEX:2:2}))
B=$((0x${BACKGROUND_HEX:4:2}))
LUMINANCE=$(echo "scale=3; (0.299 * $R + 0.587 * $G + 0.114 * $B) / 255" | bc -l)

# Set GTK theme based on luminance (dark if < 0.5, light if >= 0.5)
if (( $(echo "$LUMINANCE < 0.5" | bc -l) )); then
    # Dark theme
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark' 2>/dev/null || true
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' 2>/dev/null || true
    echo "Set GTK to dark theme (luminance: $LUMINANCE)"
else
    # Light theme
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita' 2>/dev/null || true
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-light' 2>/dev/null || true
    echo "Set GTK to light theme (luminance: $LUMINANCE)"
fi

# Set icon theme - try to use a better icon pack if available
if [ -d /usr/share/icons/Papirus-Dark ]; then
    gsettings set org.gnome.desktop.interface icon-theme 'Papirus-Dark' 2>/dev/null || true
elif [ -d /usr/share/icons/Papirus ]; then
    gsettings set org.gnome.desktop.interface icon-theme 'Papirus' 2>/dev/null || true
elif [ -d /usr/share/icons/breeze-dark ]; then
    gsettings set org.gnome.desktop.interface icon-theme 'breeze-dark' 2>/dev/null || true
elif [ -d /usr/share/icons/breeze ]; then
    gsettings set org.gnome.desktop.interface icon-theme 'breeze' 2>/dev/null || true
else
    # Fallback to Adwaita
    gsettings set org.gnome.desktop.interface icon-theme 'Adwaita' 2>/dev/null || true
fi

# Reload Hyprland and Waybar to apply new colours
hyprctl reload || true
pkill -SIGUSR2 waybar || true

echo "Colour scheme updated based on $WALLPAPER"